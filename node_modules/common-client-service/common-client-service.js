// Общая библиотека Client
/* SQL Queries */
const SQL = {
  CLIENT: {
    FIND_CLIENT_REGIONS_BY_USER_ID : `SELECT fias_id as "fiasId",  region_name as "regionName" FROM pa_client_service.client_regions  WHERE user_id = $1`,
    SAVE_CLIENT_REGIONS_BY_USER_ID : `INSERT INTO  pa_client_service.client_regions  (fias_id, region_name, user_id) VALUES ($1,$2,$3) ON CONFLICT (user_id, fias_id) DO NOTHING RETURNING *`,
    DELETE_CLIENT_REGIONS_BY_USER_ID : `
    UPDATE pa_client_service.client_regions  
    SET deleted = now()
    WHERE fias_id = $1 and user_id = $2 RETURNING *`,
    FIND_PROFILE_BY_ID : `SELECT * FROM pa_client_service.profile  WHERE user_id = $1`,
    FIND_USER_ID_BY_EMAIL : `SELECT user_id as "userId" FROM pa_client_service.profile  WHERE email = $1`,
    UPDATE_PROFILE_PHONE_CONFIRM : `
    UPDATE pa_client_service.profile 
    SET 
    phone_confirmed_at = CASE 
        WHEN $3 = 'SUCCESS' THEN now() 
        ELSE NULL 
    END,
        updated = now()
    WHERE 
        user_id = $1 and $2 = 'phone'       
    RETURNING *`,
    UPDATE_PROFILE_EMAIL_CONFIRM : `
    UPDATE pa_client_service.profile 
    SET 
    email_confirmed_at = CASE 
        WHEN $3 = 'SUCCESS' THEN now() 
        ELSE NULL 
    END,
        updated = now()
    WHERE 
        user_id = $1 and $2 = 'email'   
    RETURNING *`,
        
    UPDATE_PROFILE_BY_ID : `
    INSERT INTO pa_client_service.profile (surname, name, patronymic, phone, user_id) VALUES ($1,$2,$3,$4,$5)
      ON CONFLICT (user_id, phone) 
      DO UPDATE SET
        surname = $1,
        name = $2,
        patronymic = $3,        
        phone = $4
    `,
    UPDATE_FIO_BY_ID : `
    INSERT INTO pa_client_service.profile (surname, name, patronymic, user_id) VALUES ($1,$2,$3,$4)
      ON CONFLICT (user_id) 
      DO UPDATE SET
        surname = $1,
        name = $2,
        patronymic = $3
    `,
    FIND_SUBSCRIPTIONS_BY_USER_ID : `
    SELECT
      s.subscription_id as "subscriptionId",
      s.subscription_name as "subscriptionName",
      s.subscription_description as "subscriptionDescription",
    CASE
        WHEN psr.blocked_at IS  NULL THEN TRUE
        ELSE FALSE
    END AS "isSubscribed"
    FROM
      pa_client_service.subscriptions s
    LEFT JOIN
      pa_client_service.profile_subscriptions_relation psr
      ON s.subscription_id = psr.subscription_id
      AND psr.user_id = $1
    ORDER BY
      s.subscription_id`, 
    UPDATE_SUBSCRIPTION_BY_USER_ID: `INSERT INTO pa_client_service.profile_subscriptions_relation as a 
      (user_id, subscription_id, created_at)
        VALUES ($1, $2, CURRENT_TIMESTAMP)
        ON CONFLICT (user_id, subscription_id) 
        DO update SET
        "blocked_at" = CASE
        WHEN $3 = false THEN NOW()
        ELSE null
      END
      RETURNING subscription_id
  `, 
// mediaId, mediaKey, userId, storage, bucket
    SET_PROFILE_IMAGE :`INSERT INTO pa_client_service.product_profile_media_storage (media_id, media_key, user_id, storage, bucket) VALUES ($1,$2,$3,$4,$5)
        ON CONFLICT (user_id) 
        DO update SET
         media_key = $2
	`,
    DELETE_PROFILE_IMAGE : `UPDATE pa_client_service.product_profile_media_storage set deleted=NOW() where media_id=$1 and user_id=$2 and deleted_at is null`, 
    GET_PROFILE_IMAGE : `select * from pa_client_service.product_profile_media_storage where user_id=$1 and deleted_at is null`,     
    CHECK_PHONE : `select * from pa_client_service.profile where phone=$1  and user_id <> $2`,
    SAVE_PHONE : `
    update pa_client_service.profile 
    set phone=$1, phone_confirmed_at = null
    where user_id=$2`,
    CHECK_EMAIL : `select * from pa_client_service.profile where email=$1  and user_id <> $2`,
    SAVE_EMAIL : `
    update pa_client_service.profile 
    set  email=$1, email_confirmed_at = null    
    where user_id=$2`,
    GET_TELEGRAM_ID : `select user_id as "userId" from pa_client_service.profile where telegram_id=$1`,
    GET_TELEGRAM_PROFILE_BY_USER_ID : `
    select data as user from pa_client_service.telegram_user_data 
    left join pa_client_service.profile on (pa_client_service.profile.telegram_id  =  pa_client_service.telegram_user_data.telegram_id )
    where pa_client_service.profile.user_id = $1
    `,
    GREATE_TELEGRAM_ID : `INSERT INTO pa_client_service.profile (user_id, telegram_id)
    VALUES ($1, $2)
    ON CONFLICT (user_id) DO NOTHING`,
    FIND_PROFILE_TELEGRAM_ID : `select id from pa_client_service.profile where telegram_id=$1`,
    UPDATE_TELEGRAM_PROFILE : `INSERT INTO pa_client_service.telegram_user_data (telegram_id, data)
      VALUES ($1, $2)
      ON CONFLICT (telegram_id)
      DO UPDATE SET data = $2, updated_at = NOW()
      RETURNING *`

  },
};

const MESSAGES = {
   RU : {    
      INPUT_VALIDATION_ERROR: 'Ошибка проверки входных данных',
   }
}

/* Экспорт */
module.exports = {
  SQL, MESSAGES
};
